{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the documentation of MEAlytics. Here you can find information about installation and usage of the MEAlytics package.</p>"},{"location":"#overview","title":"Overview","text":"<p>MEAlytics is a python package developed for analysing multiwell Micro-electrode array data. It allows for fast and simple analysis and visualisation of MEA data.</p>"},{"location":"analyse_file/","title":"Analyse file","text":""},{"location":"analyse_file/#set-parameters","title":"Set parameters","text":"<p>First, navigate to the \u201cSet Parameters\u201d tab to alter analysis parameters.</p> <p></p> <p>From here it is possible to alter the parameters or import settings from a previous experiment. To save the parameters, press Save parameters and return.</p> <p>Restore default parameters can be used to restore all parameters to the default values.</p> <p>Parameters from previous experiments can be loaded using Import parameters. Every experiment will generate a file called <code>parameters.json</code> in the output folder. These files can be selected to copy the parameters to the current analysis.</p> <p>For more information about each parameter, see Parameters.</p>"},{"location":"analyse_file/#analyse-file","title":"Analyse file","text":"<p>In the main menu, select Process single file. </p> <p></p> <p>First, press Select a file and select the file you want to process. Next, insert the sampling rate of the experiment, and the amount of electrode that each well contains. Then, press Start Analysis.</p> <p></p> <p>A new window will appear, keeping the user up to date with the progress. The analysis can be cancelled by closing this window. This might not be instant.</p>"},{"location":"analyse_file/#axion-raw-files","title":"Axion .raw files","text":"<p>Axion .raw files can unfortunately not be accessed using python, so they will first have to be converted using MATLAB using our custom script available on GitHub. For more information, see Convert Axion data.</p>"},{"location":"analyse_file/#rechunking","title":"Rechunking","text":"<p>If your file has not been rechunked/compressed yet, the application will first rechunk the file, creating a rechunked copy, and then process the rechunked file. Files can also be rechunked manually. For more information about why files are rechunked, see Compress/Rechunk files.</p>"},{"location":"axion/","title":"Processing Axion files","text":"<p>Data generated from an Axion Biosystems MEA will be saved in the .raw format. Unfortunately, it is not possible to open this format in Python. For the MEA-library to analyse these files, they must first be converted to the hdf5 format. The only way to do so, is to read the .raw files in MATLAB using the AxionFileLoader. This repository must first be downloaded and added to the MATLAB path.</p> <p>For the file conversion, a script is available in the github repository. This script will read the raw voltage data from the file, and save them in a new hdf5 file. After this, the hdf5 file can be analysed by MEAlytics. For this script to work, the AxionFileLoader must be installed in MATLAB.</p> <p>After the conversion has been completed, these files are not compressed yet, and might take up a lot of storage space. Hdf5 files can be compressed using the GUI (see Compress/Rechunk files) or using h5repack</p>"},{"location":"batch_processing/","title":"Batch processing","text":"<p>In the main menu, select Batch Processing. Next, press Select Folder and select the folder where your MEA files are located.</p> <p></p> <p>In this menu, the user can create a selection for the batch processing. It is possible to expand subfolders. Single files can be selected by clicking on them, the content of the entire folder can be selected by clicking the folder name. Once the selection has been made, press Confirm Selection.</p> <p>Next, insert the sampling rate of all the experiments, and the amount of electrodes that each well contains. Then, press Initiate Analysis.</p> <p></p> <p>It is possible to cancel the analysis by pressing Abort Analysis. The application will finish processing the current file, after which it will quit the analysis.</p>"},{"location":"compare_groups/","title":"Compare groups","text":"<p>Besides functionality for analysing raw data files, this tool also provides methods to compare the outcomes of the analysis with each other.</p> <p>In the main menu, navigate to Plotting.</p> <p>At the top of the window, press Select a folder, and select the folder that contains the outputfolder(s) of your experiment(s). The application will recursively loop through all the files/folder in the directory, and look for files that end width \u201cFeatures.csv\u201d. These files will be collected for visualisation and can be seen in the second column.</p> <p> </p> <p>In the fourth column, the user can create new labels, e.g. \u201cControl\u201d or \u201cMutated\u201d, and assign these labels to a specific well by first selecting the label followed by the desired well.</p> <p> </p> <p>These labels can be saved, imported or reset using the buttons on the right side of the window.</p> <p>After the labels have been successfully assigned to their respective wells, there are two visualisation options, Features over time and Boxplots.</p>"},{"location":"compare_groups/#features-over-time","title":"Features over time","text":"<p>The Features over time function allows the user to select multiple measurements at once and visualise how the different features develop over multiple days.</p> <p>This functionality requires the selected files to follow a certain naming convention, where the relative date of the measurement is present in the name of the output Features.csv file, and is preceded by a certain prefix such as \u2018DIV\u2019 or \u2018t\u2019. This can be seen in the following example:</p> <p> </p> <p>This prefix should be supplied to the application using the DIV Prefix entry. As an extra option, the user can choose whether to show the individual datapoints on the final figures. Lastly, press Plot Features over time to generate the visualisations, this might take a little bit.</p> <p> </p>"},{"location":"compare_groups/#results","title":"Results:","text":"<p>The error bars represent the standard error of the mean.</p>"},{"location":"compare_groups/#boxplots","title":"Boxplots","text":"<p>The boxplot functions will compare multiple groups against each other using boxplots. </p> <p>The function has multiple options;  - Show datapoints:    - Whether to show the individual datapoints in the figures.  - Colour Wells:     - Whether to assign a specific colour to each well. Can be used to discern the results of different wells when combining multiple measurements.</p> <p>Lastly, press Create Boxplots to generate the figures. Depending on the amount of data, this might take a little bit.  \u2003</p>"},{"location":"compare_groups/#results_1","title":"Results:","text":""},{"location":"compress_rechunk/","title":"Compressing/rechunking files","text":"<p>Files that originate from Multichannel Systems MEAs, or files that have been converted from the Axion .raw format are inefficiently chunked. This means that if the application wants to read the data of a single electrode, it must read the data of all electrodes at the same time. If the files are rechunked, this means that single electrode data can be loaded faster, and the analysis can be completed with less RAM use. The application will automatically rechunk files if they are inefficiently chunked, and create a copy. Additionally, compression/rechunking can be performed manually in the GUI.</p> <p>In the main menu, navigate to Compress/Rechunk files.</p> <p></p> <p>Besides rechunking the data, a compression algorithm will be applied as well. The default is LZF compression, which is not as efficient as GZIP, but achieves the compression in a much faster time. When GZIP is selected, the user can select different compression levels, where higher values will lead to smaller files, but an increased processing time. By ticking Compress all files in folder the application will loop through all files in the parent directory and apply the rechunking and compression.</p>"},{"location":"exclude_electrodes/","title":"Exclude electrodes","text":"<p>By default MEAlytics averages out single-channel features, such as the amount of spikes, over all electrodes in a well to calculate this feature for a specific well. However, some electrodes might show either very low or very high activity, pulling the well average up/down. MEAlytics includes the option to recalculate the well features, while excluding certain electrodes from the analysis.</p> <p>First, press Exclude Electrodes in the main window. You will be presented with the following window:</p> <p></p> <p>This module allows for batch processing. To process multiple experiments, select the parent folder containing the generated outputfolders. The algorithm will recursively look through the subfolders and scan for files ending with \"Features.csv\". When selecting multiple experiments, the plate layout (well and electrode number) should be the same for all files. To process a single file, select the outputfolder generated by the analysis.</p> <p>The following buttons should appear:</p> <p></p> <p>Here it is possible to select which files should be processed by pressing the buttons.</p> <p>To determine which electrodes should be removed from the analysis, we need to create a new configuration. This can be done by pressing: Edit/New configuration This will create the following window, based on the number of wells/electrodes in your experiments.</p> <p></p> <p>Here it is possible to select/deselect specific electrodes. It is also possible to save the current configuration, or load in a previous configuration (given the numbers of wells/electrodes match). To apply the current configuration, press Apply configuration.</p> <p>To recalculate the features using the current configuration, press Recalculate features The algorithm will recalculate the features from the selected experiments. Previous feature files will be replaced. Additionally, the configuration that was used will be saved in the same folder as \"excluded_electrodes.npy\". This file can be loaded using the electrode configuration window.</p> <p>Removing electrodes from feature calculations will not remove them from network calculations</p>"},{"location":"features/","title":"Features","text":"<p>MEAlytics calculates a large variety of features. Electrode features are first calculated seperately, and then averaged over the well. Below you can find an overview of all the features the package calculates.</p> <p>It is possible to add your own custom features if you have knowledge of Python programming. Instructions for this can be found in <code>_features.py</code> in the package files.</p> <p>Have a specific feature in mind that has not been added yet, and might benefit others? Please do not hesitate to contact us.</p>"},{"location":"features/#spike-features","title":"Spike features","text":"Feature name Description Spikes The total amount of spikes recorded in a single electrode (spikes) Mean Firing Rate The average activity of the electrode, calculated as the average amount of spikes per second. (spikes/s) Mean Inter-Spike interval Mean inter-spike interval. The average amount of time between two successive spikes. (s) Median Inter-Spike interval The median of the inter-spike intervals. (s) Ratio median ISI over mean ISI The ratio of the median ISI over mean ISI. Calculated by dividing the median by the mean. Inter-spike interval variance The average of the square deviations from the mean from the inter-spike intervals. (s) Coefficient of variation ISI The coefficient of variation of the inter-spike interval. (s) Partial Autocorrelaction Function ISI The partial autocorrelation of lag 1 of the ISIs. This value is calculated using the \u201cstatsmodels\u201d python library (Seabold &amp; Perktold, 2010) Mean Absolute Spike Amplitude The average absolute amplitude of the spikes. Spike amplitude is measured from 0 to the absolute top of the spike Median Absolute Spike Amplitude The median absolute amplitude of the spikes Coefficient of Variation Absolute Spike Amplitude The coefficient of variation of the absolute spike amplitude"},{"location":"features/#burst-features","title":"Burst features","text":"Feature name Description Bursts The amount of burst that are detected in a single electrode. (bursts) Mean Burst Length The average length of a burst in a single electrode. (s) Burst Length Variance The variance in the length of the bursts. (s) Burst Length Coefficient of Variation The coefficient of variation of the burst length. (s) Mean Inter-Burst Interval The average amount of time between two bursts. (s) Variance Inter-Burst Interval The variance of the inter-burst interval. (s) Coefficient of Variation IBI The coefficient of variation of the inter-burst interval. (s) Partial Autocorrelation Function IBI The partial autocorrelation of lag 1 of the inter burst interval. Mean Intra-Burst Firing Rate The average firing rate in a burst. (spikes/s) Mean Spikes per Burst The average amount of spikes per burst. (spikes) Mean Absolute Deviation Spikes per Burst The mean absolute deviation of the amount of spikes per burst. (spikes) Isolated Spikes The portion of spikes that are isolated (not part of a burst). (value from 0 to 1) Mean Burst Rate The average amount of bursts per second. (bursts/s)"},{"location":"features/#network-burst-features","title":"Network Burst Features","text":"<p>Here, \"Network Burst\" means the entire network burst, including the outer edges. If a calculation is made using the network burst core, it will be explicitly stated.</p> Feature name Description Network Bursts The total amount of network bursts in a well (network bursts) Mean Network Burst Duration The average duration of a network bursts. Calculated as the distance between the outer edges of the network burst. (s) Mean Network Burst Core Duration The average duration of the network burst core. (s) Coefficient of Variation Network Burst Core Duration The coefficient of variation of the network burst core durations. (s) Network Inter-Burst Interval The average time between the network bursts (s). This values is calculated as the average time between the outer edges of the network bursts. Partial Autocorrelation Function NIBI The partial autocorrelation of lag 1 of the network inter burst intervals Network Burst to Network Burst Core ratio The average ratio between the length of the network burst and network burst core. NIBI Variance The variation between the network interburst intervals (s) Coefficient of Variation NIBI The coefficient of variation between the network interburst intervals (s) Mean Spikes per Network Burst The average amount of spikes in a network burst Network Burst Firing Rate The average firing rate in the network bursts (spikes/s) Network Burst ISI The average inter spike interval in the network bursts (s) Portion of Spikes in Network Bursts The portion of spikes that are participating in network bursts. Portion of Bursts in Network Bursts The portion of bursts that are participating in network bursts. Ratio Left Outer NB over NB Core The average ratio of the left outer burst compared to the burst core Ratio Right Outer NB over NB Core The average ratio of the left outer burst compared to the burst core Ratio Left Outer over Right Outer NB The ratio of the left outer burst compared to the right outer burst Participating Electrodes The average amount of channels that are actively bursting during network bursts"},{"location":"gui/","title":"Graphical user interface","text":"<p>The graphical user interface is the simplest way to communicate with the library. The GUI can be launched in multiple ways:</p>"},{"location":"gui/#launch-from-command-prompt","title":"Launch from command prompt","text":"<p>Firstly, the GUI can be launched from the command prompt. Simply open the command prompt, and enter \u201ccureq\u201d.</p> <pre><code>C:\\Users&gt;cureq\nSuccessfully launched MEA GUI\n</code></pre> <p>The output should look like this, and the GUI should appear on your screen.</p> <p></p>"},{"location":"gui/#create-shortcuts","title":"Create shortcuts","text":"<p>This process can be simplified by creating shortcuts that in essence perform the same process. In the command prompt, enter \u201ccureq --create-shortcut\u201d.</p> <pre><code>C:\\Users&gt;cureq --create-shortcut\nDesktop shortcut created at C:\\Users\\Desktop\\CureQ.lnk\n</code></pre> <p>The output should look like this, and a shortcut should appear on your desktop:</p> <p></p> <p>If you are on a Windows machine, the shortcut will also be added to the start menu. The shortcut can also be added to the taskbar by pressing \u201cPin to taskbar\u201d.</p>"},{"location":"gui/#launch-from-python-script","title":"Launch from python script","text":"<p>Lastly, the GUI can be launched from a python script. Create a python file and execute the following code: <pre><code>from CureQ.GUI.mea_analysis_tool import MEA_GUI\n\nif __name__ == \"__main__\":\n    MEA_GUI()\n</code></pre> The GUI should always be opened inside the <code>if __name__ == '__main__'</code> guard. Otherwise, when using multiprocessing, the application will slowly create an infinite amount of processes and crash the application.</p>"},{"location":"heatmap/","title":"Heatmap","text":"<p>MEAlytics contains a heatmap module designed to provide an intuitive overview of neural activity across the entire MEA plate. It can be accessed as follows:</p> <p>Similar to the Inspect results section, first navigate the the View Results module. Here select both the outputfolder generated by the analysis, and the raw data file that was used. Then, navigate to the third tab named Heatmap and open a new window for the heatmap using the button that is presented. Before accessing the heatmap, the data needs to be processed, this can be initiated with the button Process data. After the data has been processed, the heatmap can be shown using Show heatmap.</p> <p></p> <p>The total spike activity in the individual electrodes can be displayed using Show total activity.</p> <p></p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installing-python","title":"Installing Python","text":"<p>Since the tool is programmed in python, it is necessary to have python installed in order to run the application. Here, we demonstrate one method to install python on a Windows machine. However there are many (more elaborate) guides available online that should suffice.  The python interpreter can be installed using the official python installer. All python versions can be found on https://www.python.org/downloads/. The MEA analysis tool has been developed and tested on python 3.11, but will most likely also work on other python 3.* versions.</p> <p>Download the desired python version, and execute the file you have just downloaded. You will be presented with the following window: </p> <p>Select the option Add python.exe to PATH. This will allow your operating system to recognise the python installation. Then, press Install Now. Finally, let\u2019s confirm that both python and pip are successfully installed by running the following commands in the command prompt. <pre><code>C:\\&gt;python --version\nPython 3.11.9\n\nC:\\&gt;pip --version\npip 23.3.1\n</code></pre> If both outputs look like this (it can be different versions) both python and pip have been successfully installed and are recognised by the system. </p>"},{"location":"installation/#installing-mealytics","title":"Installing MEAlytics","text":"<p>Once both python and pip have been installed, acquiring the MEA analysis tool should be simple. For the next step we will use pip to install the tool. First, open the command prompt, then enter: <pre><code>pip install cureq\n</code></pre> Pip will now collect the MEAlytics package from the internet, collect and install dependencies and the library. The last few lines should look like this: <pre><code>Installing collected packages: cureq\nSuccessfully installed cureq-1.1.1\n</code></pre> The MEA analysis tool is now successfully installed on your machine and can be executed from a python script.</p>"},{"location":"installation/#add-to-path","title":"Add to path","text":"<p>When downloading the MEA analysis tool, the following warning might appear: <pre><code>WARNING: The script cureq.exe is installed in 'C:\\Users\\User\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\Scripts' which is not on PATH.\nConsider adding this directory to PATH or, if you prefer to supress this warning, use --now-warn-script-location.\n</code></pre> This usually occurs when python is installed using the Microsoft store. It means that the directory containing python scripts is not added to the PATH environment variable yet. This will mean that the MEAlytics CLI commands will not be able to be executed from the command line. To fix this, the file path will have to be manually added to the environment variables. This can be done using one of the following guides:</p> <ul> <li>https://stackoverflow.com/questions/44272416/how-to-add-a-folder-to-path-environment-variable-in-windows-10-with-screensho</li> <li>https://www.eukhost.com/kb/how-to-add-to-the-path-on-windows-10-and-windows-11/ </li> </ul> <p>In this example, the folder that should be added to PATH is: <pre><code>C:\\Users\\User\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\Scripts\n</code></pre></p>"},{"location":"installation/#upgrade-library","title":"Upgrade Library","text":"<p>MEAlytics might receive further updates to enhance the analysis, or fix problems. To check the current version of the library, open the command prompt, and enter: <pre><code>C:\\&gt; cureq --version    \nCureQ MEA analysis tool - Version: 1.2.7\n</code></pre></p> <p>The most recent available version of the library can be found on the pypi page. The library can be upgraded using the command: <pre><code>pip install cureq \u2013upgrade\n</code></pre> This will upgrade the library to the newest available version.</p> <pre><code>C:\\ &gt; pip install cureq --upgrade\nSuccessfully installed cureq-1.2.7\n</code></pre>"},{"location":"output/","title":"Output","text":"<p>During the analysis, the application will create an \u201coutputfolder\u201d where it stores all results and details from the analysis. This outputfolder can be found in the same location as the raw data file. The outputfolder will share the same name as the raw data file, with the date and time of the analysis attached at the end. The outputfolder contains several files:</p> <p></p> <p>output_values.h5 contain files that are used to save the intermediate results of the spike, burst and network burst detection process. These files are used to calculate the output features and visualise the process in the GUI. These files are generally not important for the end user.</p> <p>The Figures folder contains visualisations for the network burst detection process, and can be used to get a quick overview of network/well activity without having to load in the results in the GUI.</p> <p>The file ending with Features.csv will contain the output features that are calculated by the analysis tool. Here, every column is a feature, and every row is a well. Here all electrode features are averaged out over the well.</p> <p>The file ending with Electrode_Features.csv will contain the single electrode features, such as spike and single channel burst metrics, calculated per individual electrode.</p> <p>For more information about the features the MEA analysis tool calculates, see Features Output.</p> <p>Lastly, the parameters.json file contains information about the analysis such as which parameters were used, some information about the dataset, and which version of the tool was used. This file can be used to copy settings from a previous analysis. For more information on how to do this, see Analyse Single File</p>"},{"location":"output/#it-is-recommended-to-not-alter-or-relocate-any-of-these-files-as-certain-functionality-of-the-package-such-as-plotting-excluding-electrodes-and-inspecting-results-rely-on-the-naming-and-location-of-these-files","title":"It is recommended to not alter or relocate any of these files, as certain functionality of the package, such as plotting, excluding electrodes and inspecting results rely on the naming and location of these files.","text":""},{"location":"parameters/","title":"Parameters","text":"<p>The MEAlytics package contains a wide range of parameters that can be used to alter the analysis pipeline. Described below are all the parameters, and how they affect the analysis pipeline.</p> <p>The default parameter values are stored as a dictionary in the library, and can be accessed as follows:</p> <pre><code>from CureQ.mea import get_default_parameters\nprint(get_default_parameters())\n</code></pre> <p>Default parameters are automatically loaded into the MEAlytics GUI</p>"},{"location":"parameters/#bandpass-filter","title":"Bandpass filter","text":""},{"location":"parameters/#low-cutoff","title":"Low cutoff","text":"<p>Low cutoff frequency for the Butterworth bandpass filter. Default value: 200 Hz</p>"},{"location":"parameters/#high-cutoff","title":"High cutoff","text":"<p>High cutoff frequency for the Butterworth bandpass filter. Default value: 3500 Hz</p>"},{"location":"parameters/#order","title":"Order","text":"<p>The filter order used for the Butterworth bandpass filter. Default value: 2</p>"},{"location":"parameters/#threshold","title":"Threshold","text":""},{"location":"parameters/#threshold-portion","title":"Threshold portion","text":"<p>Portion of the data that is used to calculate the threshold value. Higher values can give a more accurate estimate of the background noise level, but takes longer to compute.  Default value: 0.1</p>"},{"location":"parameters/#standard-deviation-multiplier","title":"Standard deviation multiplier","text":"<p>Value that is multiplied with the standard deviation of a portion of the data to create a threshold that determines whether this portion of the data contains purely noise or potential spikes. Default value: 5</p>"},{"location":"parameters/#rms-multiplier","title":"RMS multiplier","text":"<p>Value that is multiplied with the root mean square (RMS) of the background noise to determine the threshold for the spike detection. Default value: 5</p>"},{"location":"parameters/#spike-detection","title":"Spike detection","text":""},{"location":"parameters/#refractory-period","title":"Refractory period","text":"<p>The refractory period of the spike. The time in which only one spike can be detected. Value should be given in seconds. Default value: 0.001</p>"},{"location":"parameters/#spike-validation","title":"Spike validation","text":""},{"location":"parameters/#spike-validation-method","title":"Spike validation method","text":"<p>The spike validation method used to determine whether a threshold crossing should be considered a neuronal signal or discarded. Possible options: Noisebased, none. Default value: Noisebased</p>"},{"location":"parameters/#exit-time","title":"Exit time","text":"<p>The time the signal must drop/rise below a certain amplitude before/after it has reached its absolute peak. Value should be given in seconds.  Default value: 0.001</p>"},{"location":"parameters/#drop-amplitude","title":"Drop amplitude","text":"<p>Multiplied with the surrounding background noise of the spike to determine the amplitude the signal must drop. Default value: 5</p>"},{"location":"parameters/#max-drop","title":"Max drop","text":"<p>Value multiplied with the threshold value of the electrode to determine the maximum amplitude the signal can be required to drop. Default value: 2</p>"},{"location":"parameters/#burst-detection","title":"Burst detection","text":""},{"location":"parameters/#minimal-amount-of-spikes","title":"Minimal amount of spikes","text":"<p>The smallest amount of spikes that can form a single channel burst. Default value: 5</p>"},{"location":"parameters/#default-interval-threshold","title":"Default interval threshold","text":"<p>The default inter-spike interval (ISI) threshold used for burst detection. Value should be given in milliseconds.  Default value: 100</p>"},{"location":"parameters/#max-interval-threshold","title":"Max interval threshold","text":"<p>The maximum ISI threshold that can be used for burst detection. Values should be given in milliseconds. Default value: 1000</p>"},{"location":"parameters/#kde-bandwidth","title":"KDE bandwidth","text":"<p>The bandwidth of the Kernel Density Estimate (KDE) used for determining the burst detection parameters. Default value: 1</p>"},{"location":"parameters/#network-burst-detection","title":"Network burst detection","text":""},{"location":"parameters/#min-channels","title":"Min channels","text":"<p>The minimal amount of channels that should be participating in a network burst to consider it as one. Value should be given as a percentage. Default value: 0.5</p>"},{"location":"parameters/#thresholding-method","title":"Thresholding method","text":"<p>The method used to automatically calculate the threshold used for determining high-activity periods. Possible values: Yen, Otsu, Li, Isodata, Mean, Minimum, Triangle. See scikit-image filters.  Default value: Yen</p>"},{"location":"parameters/#kde-bandwidth_1","title":"KDE bandwidth","text":"<p>The bandwidth used for the kernel density estimate representing spike activity. Default value: 0.05</p>"},{"location":"python_package/","title":"MEAlytics as Python package","text":"<p>Besides the GUI, the MEA analysis tool can also be called as a python library, and has a few functions that can be of use to the user. Let\u2019s walk through an example to fully analyse a MEA file.</p>"},{"location":"python_package/#analysing-mea-file","title":"Analysing MEA file","text":"<p>Firstly, import the necessary functions:</p> <pre><code>from CureQ.mea import analyse_wells, get_default_parameters\n</code></pre> <p>Next, we define some variables that we later need to pass to the function.</p> <pre><code>fileadress='C:/mea_data/mea_experiment.h5'\nsampling_rate=20000\nelectrode_amount=12\n</code></pre> <p>Then, we retrieve the dictionary containing the default parameters so we can alter the analysis. In this case we turn on multiprocessing to speed up the analysis.</p> <pre><code>parameters = get_default_parameters()\nparameters['use multiprocessing'] = True\n</code></pre> <p>Finally, pass all the arguments to the analyse_wells function to initiate the analysis. Because we turned on multiprocessing, we must use and <code>\u201cif __name__ == \u2018__main__\u2019: \u201c</code> guard here. Otherwise, the application will eventually create an infinite number of processes and eventually crash.</p> <pre><code>if __name__ == '__main__':\n    analyse_wells(\n        fileadress=fileadress,\n        sampling_rate=sampling_rate,\n        electrode_amnt=electrode_amount,\n        parameters=parameters\n    )\n</code></pre> <p>In the end, it should look like this:</p> <pre><code>from CureQ.mea import analyse_wells, get_default_parameters\n\nfileadress='C:/mea_data/mea_experiment.h5'\nsampling_rate=20000\nelectrode_amount=12\n\nparameters = get_default_parameters()\nparameters['use multiprocessing'] = True\n\nif __name__ == '__main__':\n    analyse_wells(fileadress=fileadress,\n                  sampling_rate=sampling_rate,\n                  electrode_amnt=electrode_amount,\n                  parameters=parameters\n                  )\n</code></pre>"},{"location":"supported_plates/","title":"Supported plates","text":"<p>In theory, MEAlytics is able to support every plate type and layout, given that it can be converted to the right format. However, it is important to know how MEAlytics (automatically) handles and visualises different well and electrode layouts.</p>"},{"location":"supported_plates/#mealytics-input","title":"MEAlytics input","text":"<p>MEAlytics receives the MEA data as a dataset containing a single array for each electrode. For a MEA dataset originating from a 24-well plate with 12 electrodes per well, this would result in a dataset with 288 (12*24) rows, and a column for every voltage readout. MEAlytics also receives the amount of electrodes per well, it uses these to determine how many wells a given dataset has, and which electrode belongs to which well. MEAlytics does not receive any other input about the amount of wells.</p>"},{"location":"supported_plates/#displaying-different-plate-types","title":"Displaying different plate types","text":""},{"location":"supported_plates/#displaying-wells","title":"Displaying wells","text":"<p>When given a certain amount of wells, MEAlytics will automatically calculate the optimal number of rows and columns for this well amount to display the different wells. For example, for a measurement containing 24 wells, the wells will be displayed as follows:</p> <p></p> <p>This means that the way that wells are displayed in MEAlytics does not always match how the wells are arranged in the actual plate. However, wells in MEAlytics (and in the output feature files) are always numbered from top left to bottom right (When converted from Axion using our conversion script).</p>"},{"location":"supported_plates/#displaying-electrodes","title":"Displaying electrodes","text":"<p>Displaying electrodes will follow a similar procedure, where the number of rows and columns to display are automatically determined. MEAlytics does however contain a default configuration for wells containing 12 electrodes. Those electrodes will be displayed as follows:</p> <p></p> <p>Where again electrodes are numbered from top left to bottom right (When converted from Axion using our conversion script).</p>"},{"location":"view_results/","title":"Inspect results","text":"<p>MEAlytics allows the user to inspect the results after the analysis has been completed. In the main menu, select View Results.</p> <p> </p> <p>Here, select the output folder that was generated by the analysis. Next, select the raw data file that was used for the experiment. Then press View Results.</p> <p>This window contains two tabs, Single Electrode View and Whole Well View.</p> <p> </p>"},{"location":"view_results/#single-electrode-view","title":"Single Electrode View","text":"<p>From the Single Electrode View tab, the user can select the desired well and electrode, after which a new window will open.</p> <p> </p> <p>Again, this window contains two tabs, Spike Detection and Burst Detection. The first tab displays the spike detection applied to the raw electrode data. It also contains all the parameters that influence the spike detection. The user can alter these parameters to see how they could affect the analysis. They will not have any effect on the outcomes of the current experiment, or further steps, such as burst or network burst detection.</p> <p>In the second tab, the burst detection is applied to the electrode data is shown, as well as the kernel density estimate that was used to determine the burst detection parameters. Again, the user can change certain parameters to see how they could affect the burst detection process without influencing the outcome of the current experiment.</p> <p> </p> <p>The raw data plot on both tabs is interactive and allows the user to zoom in on the data using the toolbar.</p> <p> </p>"},{"location":"view_results/#whole-well-view","title":"Whole Well View","text":"<p>From the Whole Well View tab, the user can select the desired well, after which a new window will open.</p> <p> </p> <p>Here, the user can inspect the network burst detection process on this particular well, and alter parameters to see the effect on the analysis. Again, this will not have any effect on the outcomes of the current experiment.</p>"}]}